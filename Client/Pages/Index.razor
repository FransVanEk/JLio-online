@page "/"


<div data-target="readme-toc.content" class="Box-body px-5 pb-5">
    <article class="markdown-body entry-content container-lg" itemprop="text">
        <h1><a id="user-content-jlio" class="anchor" aria-hidden="true" href="#jlio"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JLio</h1>
        <p>JLio (jay-lio) is a structured language definition for transforming JSON objects using a transformation script with a JSON notation.</p>
        <p>JLio can create and alter JSON data objects. It allows the transformation of objects, without having the need to code or develop logic. Simply writing the desired commands as a JSON object. Executing the script on a data object will transform the data object following the script commands.</p>
        <p>
            Designed with extensibility in mind, commands, and functions can be added to support the desired functionality.
            The core functionalities provide commands like add, set, copy, move, remove.
        </p>
        <p>Lowering the number of commands and functions reduces memory consumption and improves performance. The .NET implementation of JLio supports flexible configurations limiting the resources needed.</p>
        <p>The extension packs provide additional commands. Functionalities like compare, merge, schema filtering can be added. Writing your own command is a simple task as well as the possibility to override existing ones.</p>
        <p>Import-Export function packs give the possibility to transform an JSON object into another structure. The exchange between the different types will be a string notation. Parsing the string notations can convert the string into a proper JSON object.</p>
       
        <h2><a id="user-content-getting-started" class="anchor" aria-hidden="true" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Getting Started</h2>
        <p>The start point could be a script. To transform into an executable set of commands, it needs to be parsed.</p>
        <h3><a id="user-content-adding-jlio-to-your-project" class="anchor" aria-hidden="true" href="#adding-jlio-to-your-project"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Adding JLio to your project.</h3>
        <p>Adding Jlio to your projects is just adding a NuGet package to them.</p>
        <div class="highlight highlight-source-cs position-relative overflow-auto">
            <pre> <span class="pl-smi">dotnet</span> <span class="pl-smi">add</span> <span class="pl-smi">package</span> <span class="pl-smi">JLio</span>.<span class="pl-smi">Client</span></pre>
        </div>
        <h3><a id="user-content-sample-parsing" class="anchor" aria-hidden="true" href="#sample-parsing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Sample parsing</h3>
        <p>When you need to parse a JSON string into an executable, you need to use the JlioConver.Parse implementation. The JlioConvert.Parse function will return you a JlioScript that can be executed.</p>
        <div class="highlight highlight-source-cs position-relative overflow-auto">
            <pre><span class="pl-k">var</span> <span class="pl-en">script</span> <span class="pl-k">=</span> <span class="pl-smi">JLioConvert</span>.<span class="pl-en">Parse</span>(<span class="pl-smi">scriptText</span>);</pre>
        </div>
        <h3><a id="user-content-fluent-api" class="anchor" aria-hidden="true" href="#fluent-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fluent API</h3>
        <p>Alternatively, the script can be composed using the fluent API.</p>
        <div class="highlight highlight-source-cs position-relative overflow-auto">
            <pre> <span class="pl-k">var</span> <span class="pl-en">script</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-k">JLioScript</span>()
                    .<span class="pl-en">Add</span>(<span class="pl-k">new</span> <span class="pl-k">JValue</span>(<span class="pl-s"><span class="pl-pds">"</span>new Value<span class="pl-pds">"</span></span>))
                    .<span class="pl-en">OnPath</span>(<span class="pl-s"><span class="pl-pds">"</span>$.demo<span class="pl-pds">"</span></span>)
                    .<span class="pl-en">Add</span>(<span class="pl-k">new</span> <span class="pl-k">Datetime</span>())
                    .<span class="pl-en">OnPath</span>(<span class="pl-s"><span class="pl-pds">"</span>$.this.is.a.long.path.with.a.date<span class="pl-pds">"</span></span>);</pre>
        </div>
        <h2><a id="user-content-execution" class="anchor" aria-hidden="true" href="#execution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Execution</h2>
        <p>Executing the script will alter the object you provide according to the script commands. The script itself has an Execute function to invoke the transformation. The data object has to be a JToken. Converting a String to</p>
        <div class="highlight highlight-source-cs position-relative overflow-auto">
            <pre><span class="pl-k">var</span> <span class="pl-en">data</span> <span class="pl-k">=</span> <span class="pl-smi">JToken</span>.<span class="pl-en">Parse</span>(<span class="pl-s"><span class="pl-pds">"</span>{<span class="pl-cce">\"</span>demoText<span class="pl-cce">\"</span>:<span class="pl-cce">\"</span>Hello World<span class="pl-cce">\"</span>}<span class="pl-pds">"</span></span>);
<span class="pl-k">var</span> <span class="pl-en">result</span> <span class="pl-k">=</span> <span class="pl-smi">script</span>.<span class="pl-en">Execute</span>(<span class="pl-smi">JToken</span>.<span class="pl-en">Parse</span>(<span class="pl-smi">data</span>));</pre>
        </div>
        <h3><a id="user-content-complete-samples" class="anchor" aria-hidden="true" href="#complete-samples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Complete Samples</h3>
        <h4><a id="user-content-fluent-api-sample" class="anchor" aria-hidden="true" href="#fluent-api-sample"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>Fluent api sample</h4>
        <div class="highlight highlight-source-cs position-relative overflow-auto">
            <pre><span class="pl-k">var</span> <span class="pl-en">script</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-k">JLioScript</span>()
                    .<span class="pl-en">Add</span>(<span class="pl-k">new</span> <span class="pl-k">JValue</span>(<span class="pl-s"><span class="pl-pds">"</span>new Value<span class="pl-pds">"</span></span>))
                    .<span class="pl-en">OnPath</span>(<span class="pl-s"><span class="pl-pds">"</span>$.demo<span class="pl-pds">"</span></span>)
                    .<span class="pl-en">Add</span>(<span class="pl-k">new</span> <span class="pl-k">Datetime</span>())
                    .<span class="pl-en">OnPath</span>(<span class="pl-s"><span class="pl-pds">"</span>$.this.is.a.long.path.with.a.date<span class="pl-pds">"</span></span>);
   
<span class="pl-k">var</span> <span class="pl-en">data</span> <span class="pl-k">=</span> <span class="pl-smi">JToken</span>.<span class="pl-en">Parse</span>(<span class="pl-s"><span class="pl-pds">"</span>{<span class="pl-cce">\"</span>demoText<span class="pl-cce">\"</span>:<span class="pl-cce">\"</span>Hello World<span class="pl-cce">\"</span>}<span class="pl-pds">"</span></span>);             
<span class="pl-k">var</span> <span class="pl-en">result</span> <span class="pl-k">=</span> <span class="pl-smi">script</span>.<span class="pl-en">Execute</span>(<span class="pl-smi">data</span>);</pre>
       </div>
        <h4><a id="user-content-parse-script-sample" class="anchor" aria-hidden="true" href="#parse-script-sample"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>parse script sample</h4>
        <div class="highlight highlight-source-cs position-relative overflow-auto">
            <pre><span class="pl-k">var</span> <span class="pl-en">script</span> <span class="pl-k">=</span> <span class="pl-smi">JLioConvert</span>.<span class="pl-en">Parse</span>(<span class="pl-s"><span class="pl-pds">"</span>[{<span class="pl-cce">\"</span>path<span class="pl-cce">\"</span>:<span class="pl-cce">\"</span>$.myObject.newProperty<span class="pl-cce">\"</span>,<span class="pl-cce">\"</span>value<span class="pl-cce">\"</span>:<span class="pl-cce">\"</span>new value<span class="pl-cce">\"</span>,<span class="pl-cce">\"</span>command<span class="pl-cce">\"</span>:<span class="pl-cce">\"</span>add<span class="pl-cce">\"</span>}]<span class="pl-pds">"</span></span>);
<span class="pl-k">var</span> <span class="pl-en">data</span> <span class="pl-k">=</span> <span class="pl-smi">JToken</span>.<span class="pl-en">Parse</span>(<span class="pl-s"><span class="pl-pds">"</span>{<span class="pl-cce">\"</span>demoText<span class="pl-cce">\"</span>:<span class="pl-cce">\"</span>Hello World<span class="pl-cce">\"</span>}<span class="pl-pds">"</span></span>);
<span class="pl-k">var</span> <span class="pl-en">result</span> <span class="pl-k">=</span> <span class="pl-smi">script</span>.<span class="pl-en">Execute</span>(<span class="pl-smi">data</span>);</pre>
           </div>
        <h2><a id="user-content-jsonpath" class="anchor" aria-hidden="true" href="#jsonpath"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>JsonPath</h2>
        <p>Jsonpath is used to select the items in the data objects. It uses a simple notation to indicate which element needs to be selected.</p>
        <table>
            <thead>
                <tr>
                    <th>JSONPath</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>$</td>
                    <td>the root object/element</td>
                </tr>
                <tr>
                    <td></td>
                    <td>the current object/element</td>
                </tr>
                <tr>
                    <td>. or []</td>
                    <td>child operator</td>
                </tr>
                <tr>
                    <td>..</td>
                    <td>recursive descent. JSONPath borrows this syntax from E4X.</td>
                </tr>
                <tr>
                    <td>*</td>
                    <td>wildcard. All objects/elements regardless their names.</td>
                </tr>
                <tr>
                    <td>[]</td>
                    <td>subscript operator. XPath uses it to iterate over element collections and for predicates. In Javascript and JSON it is the native array operator.</td>
                </tr>
                <tr>
                    <td>[,]</td>
                    <td>Union operator in XPath results in a combination of node sets. JSONPath allows alternate names or array indices as a set.</td>
                </tr>
                <tr>
                    <td>[start : end : step]</td>
                    <td>array slice operator borrowed from ES4.</td>
                </tr>
                <tr>
                    <td>?()</td>
                    <td>applies a filter (script) expression.</td>
                </tr>
                <tr>
                    <td>()</td>
                    <td>script expression, using the underlying script engine.</td>
                </tr>
            </tbody>
        </table>
        <p>See: JSONPath expressions - <a href="https://goessner.net/" rel="nofollow">https://goessner.net/</a></p>
    </article>
</div>

@code{



}
