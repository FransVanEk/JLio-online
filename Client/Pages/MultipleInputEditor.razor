@page "/multipleInputEditor"
@page "/multipleInputEditor/{sampleName}"

@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using System.Web
@using System.Runtime.CompilerServices

@inject HttpClient Http
@inject DialogService dialogService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject PersistenceStore documents
@inject IWebAssemblyHostEnvironment HostEnvironment
@inject SamplesStore samplesStore

<RadzenDialog></RadzenDialog>
<RadzenNotification></RadzenNotification>
<RadzenFieldset Text="Options">
    <div class="row">
        <div class="col-md-4">
            <RadzenTextBox @bind-Value="model.Name" style="width:100%;margin-bottom:3px;" />
        </div>
        <div class="col-md-2">
            <RadzenButton ButtonType="ButtonType.Button" Icon="save" Click=@(args => SaveJlioDocument()) style="width:100%;margin-bottom:3px;" />
        </div>
        <div class="col-md-4">
            @if (JLioDocuments != null && JLioDocuments.Any())
            {
            <RadzenDropDown AllowClear="false" TValue="string" Style="width: 100%" @bind-value="@selectedJLioDocument"
                            AllowFiltering="false"
                            TextProperty="Name"
                            ValueProperty="Id"
                            Data=@(JLioDocuments.Where(i=> i.Name != latest).Select(c => new {c.Id, Name = c.Id}).Distinct()) @ref="documentSelection" />
            }
        </div>
        <div class="col-md-2">
            @if (JLioDocuments != null && JLioDocuments.Any())
            {
                <RadzenSplitButton Text="Load" Click=@(args => HandleJlioDocument(args))   style="width:100%;margin-bottom:3px;"  >
                    <ChildContent>
                        <RadzenSplitButtonItem Text="Delete" Value="delete" />
                    </ChildContent>
                </RadzenSplitButton>
            }
        </div>
    </div>
</RadzenFieldset>



<div class="row">
    <div class="col-md-12">
        <RadzenFieldset Text="Input data">
            <div class="row" style="min-height: 350px;">
                <div class="col-md-3">
                    <RadzenButton ButtonType="ButtonType.Button" Icon="add_circle_outline" Click=@(args => AddInput()) Text="Add input object" ButtonStyle="ButtonStyle.Secondary" style="width:100%;margin-bottom:3px;" /><br />
                    @foreach (var inputElement in model.InputObjects.OrderBy(i => i.Name))
                    {
                    <RadzenButton ButtonType="ButtonType.Button" Text="@inputElement.Name" Click=@(args => SetInput(inputElement)) style="width:100%;margin-bottom:3px;" />
                    <br />
                    }
                </div>
                <div class="col-md-9">
                    @if (model.HasCurrentInput)
                    {
                    <div class="row">
                        <div class="col-md-8">
                            <RadzenTextBox @bind-Value="model.CurrentInput.Name" style="width:100%;margin-bottom:3px;" />
                        </div>
                        <div class="col-md-2">
                            <RadzenButton ButtonType="ButtonType.Button" Icon="delete" Text=@($"Delete input object:{model.CurrentInput.Name}") Click=@(args => DeleteCurrentInput()) style="width:100%;margin-bottom:3px;" />
                        </div>
                        <div class="col-md-2">
                            <RadzenButton ButtonType="ButtonType.Button" Icon="file_download" Click=@(args => Download($"{model.CurrentInput.Name}-input.json",model.CurrentInput.JsonString)) style="width:100%;margin-bottom:3px;" />
                        </div>

                    </div>
                    }
                    <div class="row">
                        <div class="col-md-12" style="height: auto; max-height: 300px;">
                            @if (model.HasCurrentInput)
                            {
                            <JsonEditor @bind-Text="@model.CurrentInput.JsonString" @ref="inputEditor" />
                            }
                        </div>
                    </div>

                </div>
            </div>
        </RadzenFieldset>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <RadzenFieldset Text="Script">
            <div class="row">
                <div class="col-md-3">
                    <RadzenDropDown AllowClear="false" TValue="string" Style="width: 100%" @bind-value="@model.SelectedCommand"
                                    AllowFiltering="false"
                                    Data=@model.Commands /><br />


                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Icon="add_circle_outline" Text="New command wizard" Click=StartWizard style="width:100%;margin-bottom:3px;" />

                </div>
                <div class="col-md-9" style="height: auto; max-height: 300px;">
                    <JsonEditor @bind-Text="@model.ScriptText" @ref="scriptEditor" />
                </div>
            </div>
            <div class="row" style="padding-top: 50px">
                <div class="col-md-3">
                    <RadzenButton ButtonType="ButtonType.Button" Icon="file_download" Click=@(args => Download($"{model.Name}-script.json",model.ScriptText)) style="width:100%;margin-bottom:3px;" />
                </div>
                <div class="col-md-9">
                    <RadzenButton ButtonType="ButtonType.Button" Icon="play_arrow" ButtonStyle="ButtonStyle.Secondary" Text="Execute" Click=@(args => Execute()) style="width:100%;margin-bottom:3px;" />
                </div>
            </div>
        </RadzenFieldset>
    </div>
</div>
<div class="row">
    <div class="col-md-12" style="min-height:300px">
        <RadzenFieldset Text="Output">

            <RadzenTabs SelectedIndex="0">
                <Tabs>
                    <RadzenTabsItem Text="Objects">
                        <div class="row">
                            <div class="col-md-3">
                                @foreach (var outputElement in model.OutputObjects.OrderBy(i => i.Name))
                                {
                                <RadzenButton ButtonType="ButtonType.Button" Text="@outputElement.Name" Click=@(args => SetOutput(outputElement)) style="width:100%;margin-bottom:3px;" />
                                }
                            </div>

                            <div class="col-md-9">
                                @if (model.HasCurrentOutput)
                                {
                                <div class="row">
                                    <div class="col-md-6">
                                        <RadzenTextBox @bind-Value="model.CurrentOutput.Name" style="width:100%;margin-bottom:3px;" />
                                    </div>
                                    <div class="col-md-6">
                                        <RadzenButton ButtonType="ButtonType.Button" Icon="file_download" Click=@(args => Download($"{model.CurrentOutput.Name}-output.json",model.CurrentOutput.JsonString)) style="width:100%;margin-bottom:3px;" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <RadzenTextArea @bind-value="model.CurrentOutput.JsonString" Rows="12" Style="width: 100%" ReadOnly=true />
                                    </div>
                                </div>
                                }
                            </div>
                        </div>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Debug">
                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Simple" PageSize="25" AllowPaging="true" AllowSorting="false" Data="@model.DebugResults" TItem="CommandExecutionViewModel" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn TItem="CommandExecutionViewModel" Title="Command" Sortable="false" Frozen="true" Filterable="false" Width="200px">
                                    <Template Context="data">
                                        <RadzenButton ButtonType="ButtonType.Button" Click=@(args => ToggleExpand(data)) ButtonStyle="ButtonStyle.Warning" style="width:100%;margin-bottom:3px;">
                                            @if (data.Succes)
                                            {
                                            <RadzenIcon Icon="check_circle" style="color:green" />
                                            }
                                            else
                                            {
                                            <RadzenIcon Icon="sms_failed" style="color:red" />
                                            }
                                            - @data.Command.CommandName
                                        </RadzenButton>
                                        @if (data.Expanded)
                                        {
                                        <br />
                                        <RadzenTextArea Value=@data.CommandText Rows="12" Style="width: 100%;height:auto" ReadOnly=true />
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="CommandExecutionViewModel" Title="Diff" Sortable="false" Frozen="false" Filterable="false" Width="480px">
                                    <Template Context="data">
                                        @if (data.Expanded)
                                        {
                                        <JsonDiff @bind-OriginalJson=@data.StartObjectText @bind-ModifiedJson=@data.EndObjectText></JsonDiff>
                                        }
                                        else
                                        {
                                        @if (data.HasChanges)
                                            {
                                        <RadzenIcon Icon="published_with_changes" style="color:green" />
                                            }
                                            else
                                            {
                                        <RadzenIcon Icon="sync_problem" style="color:orange" />
                                            }
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="CommandExecutionViewModel" Title="Log" Sortable="false" Frozen="false" Filterable="false">
                                    <Template Context="data">
                                        @if (data.Expanded)
                                        {
                                        <RadzenTextArea Value=@data.LogText Rows="12" Style="width: 100%" ReadOnly=true />
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenTabsItem>
                    @if(HostEnvironment.Environment == "Development")
                        {
                    <RadzenTabsItem Text="create sample">
                        <div class="row">
                            <div class="col-md-3">
                                @if (!string.IsNullOrWhiteSpace(sample.Title) && !string.IsNullOrWhiteSpace(sample.Description) && samplesStore.Samples.All(s => s.Title!=sample.Title))
                                {
                                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Text="Add" Click=@(args => AddSample()) style="width: 100%; margin-bottom: 3px;"/><br />
                                }
                                <RadzenTextBox @bind-value="sample.Title" Rows="12" Style="width: 100%" ReadOnly=false/>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-3">
                                <RadzenTextArea @bind-value="sample.Description" Rows="12" Style="width: 100%" ReadOnly=false />
                            </div>
                        </div>
                    </RadzenTabsItem>
                        }
                </Tabs>
            </RadzenTabs>
        </RadzenFieldset>
    </div>
</div>

@code {
    [Parameter]
    public string SampleName { get; set; }

    private Sample sample = new Sample();

    List<JLioDocumentModel> JLioDocuments { get; set; } = new List<JLioDocumentModel>();
    RadzenDropDown<string> documentSelection;
    JsonEditor scriptEditor;
    JsonEditor inputEditor;

    string selectedJLioDocument = null;


    const string latest = "_latest_";

    private MultilineEditorViewModel model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        model = new MultilineEditorViewModel
        {
            InputObjects = new List<JsonObjectViewModel>
        {
                    new JsonObjectViewModel { Name = "sample", JsonString = "{ }" },
                },
            Commands = new List<string>() { "Add", "Copy", "Move", "Remove", "Set" },
            ScriptText = "[\r\n  {\r\n    \"path\": \"$.myObject.newProperty\",\r\n    \"value\": {\r\n      \"new object\": \"Added by value\"\r\n    },\r\n    \"command\": \"add\"\r\n  },\r\n  {\r\n    \"path\": \"$.myObject.newProperty2\",\r\n    \"value\": \"=newGuid()\",\r\n    \"command\": \"add\"\r\n  }\r\n]"
        };


        await GetJLioDocuments();
        await samplesStore.GetSamples();

        if (string.IsNullOrWhiteSpace(SampleName))
        {
            LoadJlioDocument(latest);
        }
        else
        {
            LoadSample();
        }

        ResetInputSelection();
        ResetOutputSelection();

        NavigationManager.LocationChanged += LocationChanged;
        Execute();

        base.OnInitialized();
    }


    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        SaveJlioDocument(latest).Wait();
    }

    async Task GetJLioDocuments()
    {
        JLioDocuments = await documents.GetModels();

    }

    void ToggleExpand(CommandExecutionViewModel item)
    {
        item.Expanded = !item.Expanded;
    }

    void SetInput(JsonObjectViewModel item)
    {
        model.CurrentInput = item;
        inputEditor.Update(model.CurrentInput.JsonString);
    }

    void SetOutput(JsonObjectViewModel item)
    {
        model.CurrentOutput = item;
    }

    void DeleteCurrentInput()
    {
        if (model.HasCurrentInput)
        {
            model.InputObjects.Remove(model.CurrentInput);
            ResetInputSelection();
        }
    }

    async Task AddSample()
    {
        Execute();
        sample.Model = JsonConvert.DeserializeObject<MultilineEditorViewModel>(JsonConvert.SerializeObject(model));
        if (sample.Model != null) sample.Model.Name = $"Sample-{samplesStore.Samples.Count + 1}";
        sample.Tags= ExtractTags();
        samplesStore.Samples.Add(sample);
        sample = new Sample();
        NavigationManager.NavigateTo($"/samples");
    }

    private List<string> ExtractTags()
    {
        var script = ParseScript(ExecutionContext.CreateDefault());
        var tags = script.Select(l => l.CommandName).Distinct().ToList();
        return tags;
    }

    void ResetInputSelection()
    {
        model.CurrentInput = model.InputObjects.OrderBy(i => i.Name).FirstOrDefault();
    }
    void ResetOutputSelection()
    {
        model.CurrentOutput = model.OutputObjects.OrderBy(i => i.Name).FirstOrDefault();
    }

    void AddInput()
    {
        var newItem = new JsonObjectViewModel { Name = "newObject", JsonString = "{}" };
        model.InputObjects.Add(newItem);
        model.CurrentInput = newItem;
        SetInput(newItem);
    }

    JToken Execute()
    {
        var executeContext = ExecutionContext.CreateDefault();
        var scriptLines = ParseScript(executeContext);
        var startObject = ParseInput(executeContext);

        model.DebugResults = new List<CommandExecutionViewModel>();
        scriptLines.ForEach(l =>
        {
            var executionResult = l.Execute(startObject.DeepClone(), executeContext);
            model.DebugResults.Add(new CommandExecutionViewModel(l, executionResult.Success, startObject, executionResult.Data, executeContext.Logger.LogText));
            executeContext = ExecutionContext.CreateDefault();
            startObject = executionResult.Data;
        });

        SetExecutionResult(new JLioExecutionResult(model.DebugResults.All(i => i.Succes), startObject));
        return startObject;
    }

    private void SetExecutionResult(JLioExecutionResult executionResult)
    {
        var result = ((JObject)executionResult.Data).ConvertToDictionary();

        model.OutputObjects = new List<JsonObjectViewModel>();

        result.Keys.ToList().ForEach(k => model.OutputObjects.Add(new JsonObjectViewModel
        {
            Name = k,
            JsonString = result[k].ToString(Formatting.Indented)
        }
        ));
        ResetOutputSelection();
    }


    private JLioScript ParseScript(IExecutionContext context)
    {
        JLioScript script;
        try
        {
            script = JLioConvert.Parse(model.ScriptText);
        }
        catch (Exception)
        {
            context.LogError("script is malformed",
                "update json script so it is valid. Execution terminated");
            return new JLioScript();
        }

        return script;
    }

    JToken ParseInput(IExecutionContext context)
    {


        var currentObjectName = string.Empty;

        try
        {
            var collection = new Dictionary<string, JToken>();
            model.InputObjects.ForEach(i =>
            {
                currentObjectName = i.Name;
                collection.Add(i.Name, JToken.Parse(i.JsonString));
            });

            return collection.ConvertToDataObject();

        }
        catch (Exception)
        {
            context.LogError($"input object {currentObjectName} is malformed or is provided twice",
                "update json object so it is valid. Execution terminated");

        }

        return new JObject();
    }

    async Task StartWizard()
    {

        if (string.IsNullOrEmpty(model.SelectedCommand))
        {
            NotificationService.Notify(NotificationSeverity.Info, "No command is selected", "Select a command in the dropdown box", 5000);
            return;
        }
        var dataContext = Execute();


        switch (model.SelectedCommand)
        {
            case "Add":
                var addCommand = await dialogService.OpenAsync<AddWizard>($"Add command wizard",
                   new Dictionary<string, object>() { { "DataContext", dataContext } },
                   new DialogOptions() { Width = "900px", Height = "630px" });

                if (addCommand is ICommand a)
                {
                    AddToScript(a);
                }
                break;

            case "Set":
                var setCommand = await dialogService.OpenAsync<SetWizard>($"Set command wizard",
                    new Dictionary<string, object>() { { "DataContext", dataContext } },
                    new DialogOptions() { Width = "900px", Height = "630px" });
                if (setCommand is ICommand s)
                {
                    AddToScript(s);
                }
                break;

            case "Put":
                var putCommand = await dialogService.OpenAsync<PutWizard>($"Put command wizard",
                    new Dictionary<string, object>() { { "DataContext", dataContext } },
                    new DialogOptions() { Width = "900px", Height = "630px" });
                if (putCommand is ICommand p)
                {
                    AddToScript(p);
                }
                break;

            case "Remove":
                var removeCommand = await dialogService.OpenAsync<RemoveWizard>($"Remove command wizard",
                    new Dictionary<string, object>() { { "DataContext", dataContext } },
                    new DialogOptions() { Width = "900px", Height = "630px" });
                if (removeCommand is ICommand r)
                {
                    AddToScript(r);
                }
                break;
            case "Copy":
                var copyCommand = await dialogService.OpenAsync<CopyWizard>($"Copy command wizard",
                    new Dictionary<string, object>() { { "DataContext", dataContext } },
                    new DialogOptions() { Width = "900px", Height = "630px" });
                if (copyCommand is ICommand c)
                {
                    AddToScript(c);
                }
                break;
            case "Move":
                var moveCommand = await dialogService.OpenAsync<MoveWizard>($"Move command wizard",
                    new Dictionary<string, object>() { { "DataContext", dataContext } },
                    new DialogOptions() { Width = "900px", Height = "630px" });
                if (moveCommand is ICommand m)
                {
                    AddToScript(m);
                }
                break;

            default:
                NotificationService.Notify(NotificationSeverity.Info, "wizard not implemented yet", "", 5000);
                break;
        }
    }



    async Task Download(string name, string text)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(text);
        await SaveAsFile.SaveAs(js, name, bytes);
    }

    async Task SaveJlioDocument()
    {
        await SaveJlioDocument(model.Name);
    }

    async Task SaveJlioDocument(string name)
    {
        var document = new JLioDocumentModel
        {
            Name = name,
            JsonData = JsonConvert.SerializeObject(model),
        };

        if (await documents.Exists(document.Id))
        {
            await documents.Update(document);
        }
        else
        {
            await documents.Add(document);
        }
        await GetJLioDocuments();
    }

    async void HandleJlioDocument(RadzenSplitButtonItem item)
    {
        if (item != null && item.Value == "delete")
        {
            if (await documents.Exists(selectedJLioDocument))
            {
                await documents.Delete(selectedJLioDocument);
                selectedJLioDocument = string.Empty;
                documentSelection.Reset();
                await GetJLioDocuments();
            }
        }

    }


    void LoadJlioDocument(string selectedJLioDocumentId)
    {
        var selectedItem = JLioDocuments.FirstOrDefault(i => i.Id == selectedJLioDocumentId);
        if (selectedItem != null)
        {
            model = JsonConvert.DeserializeObject<MultilineEditorViewModel>(selectedItem.JsonData);
            if (model == null)
            {
                model = new MultilineEditorViewModel();
            }
            model.Commands = new List<string>() { "Add", "Copy", "Move","Put", "Remove", "Set" };
            scriptEditor.Update(model.ScriptText);
        }

    }


    void LoadSample()
    {
        var loadedsample = samplesStore.Samples.FirstOrDefault(s => s.Title == HttpUtility.UrlDecode(SampleName));
        if (loadedsample == null)
        {
            LoadJlioDocument("");
        }
        else
        {
            sample = new Sample();
            sample.Title = loadedsample.Title;
            sample.Description = loadedsample.Description;
            model = JsonConvert.DeserializeObject<MultilineEditorViewModel>(JsonConvert.SerializeObject(loadedsample.Model)); //to Remove reference
            scriptEditor.Update(model?.ScriptText);
        }
    }



    private void AddToScript(ICommand jsonCommand)
    {
        var script = ParseScript(ExecutionContext.CreateDefault());
        script.AddLine(jsonCommand);
        model.ScriptText = JLioConvert.Serialize(script);
        scriptEditor.Update(model.ScriptText);
    }
}




